Refined Flask App:

### Project Directory Structure

```
/my_flask_app
    /app
        /static
        /templates
        /blueprints
        /models
        /services
        /routes
        __init__.py
        config.py
    /tests
    /migrations
    manage.py
    requirements.txt
    README.md
```

### `app/__init__.py`

```python
from flask import Flask, jsonify
from .config import DevelopmentConfig, ProductionConfig
import logging

def create_app(config_name='development'):
    app = Flask(__name__)
    if config_name == 'development':
        app.config.from_object(DevelopmentConfig)
    else:
        app.config.from_object(ProductionConfig)

    setup_logging(app)
    register_error_handlers(app)

    with app.app_context():
        # Import parts of our application, separated routes and handlers
        from .blueprints import example_blueprint

        # Register Blueprints
        app.register_blueprint(example_blueprint)

    return app

def setup_logging(app):
    logging.basicConfig(filename='app.log', level=logging.INFO)
    if not app.debug:
        import logging
        from logging.handlers import RotatingFileHandler
        file_handler = RotatingFileHandler('errors.log', maxBytes=10240, backupCount=10)
        file_handler.setLevel(logging.ERROR)
        app.logger.addHandler(file_handler)

def register_error_handlers(app):
    @app.errorhandler(404)
    def not_found_error(error):
        return jsonify({'error': 'Not found'}), 404

    @app.errorhandler(500)
    def internal_error(error):
        return jsonify({'error': 'Internal server error'}), 500
```

### `app/config.py`

```python
import os

class Config:
    SECRET_KEY = os.environ.get('SECRET_KEY') or 'you-will-never-guess'
    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL') or 'sqlite:///site.db'
    SQLALCHEMY_TRACK_MODIFICATIONS = False
    DEBUG = False

class DevelopmentConfig(Config):
    DEBUG = True

class ProductionConfig(Config):
    DEBUG = False
```

### `app/models.py`

```python
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class User(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(80), unique=True, nullable=False)
```

### `app/blueprints/example.py`

```python
from flask import Blueprint, jsonify

example_blueprint = Blueprint('example', __name__)

@example_blueprint.route('/index', methods=['GET'])
def index():
    return jsonify({'message': "Hello, Flask!"})
```

### `manage.py`

```python
from app import create_app
from app.models import db

app = create_app()

@app.before_first_request
def initialize_database():
    db.create_all()

if __name__ == "__main__":
    app.run()
```

### `requirements.txt`

```plaintext
Flask==2.1.2
SQLAlchemy==1.4.36
Flask-Migrate==3.1.0
Flask-Security==4.1.0
pytest==7.1.2
```

### `README.md`

```markdown
# My Flask App

## Introduction

This is a scalable and maintainable Flask application developed according to best practices.

## Setup

1. Install Python 3.9 or above.
2. Create a virtual environment: `python -m venv venv`
3. Activate the virtual environment:
   - On Windows: `venv\Scripts\activate`
   - On macOS/Linux: `source venv/bin/activate`
4. Install dependencies: `pip install -r requirements.txt`
5. Setup environment variables in a `.env` file (SECRET_KEY, DATABASE_URL).
6. Run the application: `python manage.py`
7. Visit `http://127.0.0.1:5000` to access the app.

## Structure

- **app**: Contains the application and related modules.
- **tests**: Contains tests.
- **migrations**: Contains database migrations.

## Contribution

See the detailed guidelines in `CONTRIBUTING.md` for setting up your development environment, running tests, and submitting changes.
```

Additionally, unit tests need to be added in the `/tests` directory to cover functionalities of the database models, routes, and error handling. This refined code now incorporates aspects like logging, error handling, configurations for multiple environments, database models, and security enhancements. The documentation in `README.md` is expanded to cover setup instructions in more detail.
```